------question--------

You need to design database for restaurant which has the following  details:
restaurant id
Name
address : street, city, pincode
cuisine : multiple cuisine
district
Ratings: date, rating, score


----------inserting values----------


db.restaurant.insert({_id:"101",restaurant_id:"R101",Name:"food corner",
    address:{street:"manapakam",city:"central",pincode:10002},
    cuisine:"south style",district:"chennai",
    Ratings:[{date:new Date("2018-06-22"),rating:4,score:60},
    {date:new Date("2018-06-21"),rating:4,score:70},
    {date:new Date("2018-06-21"),rating:3,score:60}]})
db.restaurant.insert({_id:"102",restaurant_id:"R102",Name:"your food",
    address:{street:"poroor",city:"dlr",pincode:10003},
    cuisine:"south style",district:"chennai",
    Ratings:[{date:new Date("2018-06-22"),rating:4,score:70},
    {date:new Date("2018-06-21"),rating:4,score:80},
    {date:new Date("2018-06-21"),rating:3,score:60}]})
db.restaurant.insert({_id:"103",restaurant_id:"R103",Name:"foody",
    address:{street:"vytila",city:"kerala",pincode:20003},
    cuisine:"spicy",district:"kochi",
    Ratings:[{date:new Date("2018-06-22"),rating:5,score:95},
    {date:new Date("2018-06-21"),rating:4,score:70},
    {date:new Date("2018-06-21"),rating:3,score:50}]})

---------Question and answers--------------


1. Write a MongoDB query to display all the documents in the collection restaurants. 
   db.restaurant.find() 

2. Write a MongoDB query to display the fields restaurant_id, name, and cuisine for all 
   the documents in the collection restaurant
   db.restaurant.find({},{"restaurant_id" : 1,"Name":1,"cuisine" :1});

3. Write a MongoDB query to display the fields restaurant_id, name, and cuisine, but 
   exclude the field _id for all the documents in the collection restaurant. 
   db.restaurant.find({},{"restaurant_id" : 1,"Name":1,"cuisine" :1,"_id":0});

   
4. Write a MongoDB query to display the fields restaurant_id, name, and zip code, but
 
   exclude the field _id for all the documents in the collection restaurant. 
   db.restaurant.find({},{"restaurant_id" : 1,"Name":1,"address.pincode" :1,"_id":0});

5. Write a MongoDB query to display all the restaurant which is in Chennai
   db.restaurant.find({"district" : "chennai"});


6. Write a MongoDB query to display the first 5 restaurant which is in the district Chennai.  
   db.restaurant.find({"district" : "chennai"}).limit(5);
   
7. Write a MongoDB query to display the next 5 restaurants after skipping first 5 which are 
   in the Chennai 
   db.restaurant.find({"district" : "chennai"}).skip(5).limit(5);
   
8. Write a MongoDB query to find the restaurants who achieved a score more than 90.   
   
   db.restaurant.find({Ratings : { $elemMatch:{"score":{$gt : 90}}}});
9. Write a MongoDB query to find the restaurants that achieved a score, more than 80 but 
   less than 100. 
   db.restaurant.find({Ratings : { $elemMatch:{"score":{$gt : 80 , $lt :100}}}});
  
11. Write a MongoDB query to find the restaurants that do not prepare any cuisine of “Thai”
    and their grade score more than 70 and latitude less than -65.754168
  
  db.restaurant.find(
               {$and:
                    [{"cuisine" : {$ne :"Thai "}},
                       {"Ratings.score" : {$gt : 70}}]});
                     
           
12. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American'
    and achieved a score more than 70   
  
   db.restaurant.find(
                           {
                             "cuisine" : {$ne : "American "},
                             "Ratings.score" :{$gt: 70},});
13. Write a MongoDB query to find the restaurants which do not prepare any cuisine of 'American '
    and achieved a grade point 'A' 
    The document must be displayed according to the cuisine in descending order. 
    db.restaurant.find( {
                             "cuisine" : {$ne : "American "}} ).sort({"cuisine":-1});
14. Write a MongoDB query to find the restaurant Id, name, cuisine for those restaurants which 
    contain 'Wil' as first three letters for its name 
     db.restaurant.find(
            {Name: /^Wil/},
      {
      "restaurant_id" : 1,
      "Name":1,"cuisine" :1,
      }
      );
15. Write a MongoDB query to find the restaurant Id, name, city and cuisine for those 
    restaurants which contain 'ces' as last three letters for its name.  
       
     db.restaurant.find(
     {Name: /ces$/},
     {
      "restaurant_id" : 1,
      "Name":1,"cuisine" :1});
16. Write a MongoDB query to find the restaurant Id, name, city  and cuisine for those
    restaurants which contain 'Reg' as three letters somewhere in its name.        
     db.restaurant.find(
     {"Name": /.*Reg.*/},
     {
     "restaurant_id" : 1,
     "Name":1,"cuisine" :1});

17. Write a MongoDB query to find the restaurants which belong to the district Bronx 
    and prepared either American or Chinese dish. 

    db.restaurant.find({
    "district": "Bronx" , 
    $or : [
    { "cuisine" : "American " },
    { "cuisine" : "Chinese" }]});
18. Write a MongoDB query to find the restaurant Id, name, district and cuisine for 
    those restaurants which belong to the district Chennai or Kanchipuram 
 
    db.restaurant.find(
    {"district" :{$in :["chennai","kanchipuram"]}},
    {
    "restaurant_id" : 1,
    "Name":1,"district" :1,"cuisine" :1});
19. Write a MongoDB query to find the restaurant Id, name, district and cuisine for 
    those restaurants which are not belonging to the district Chennai or Kanchipuram
    db.restaurant.find(
    {"district"  :{$nin :["chennai","kanchipuram"]}},
     {
      "restaurant_id" : 1,
      "Name":1,"cuisine" :1});

20. Write a MongoDB query to find the restaurant Id, name, district and cuisine for 
    those restaurants which achieved a score which is not more than 10. 
      db.restaurant.find(
      {"Ratings.score" : 
      { $not: 
      {$gt : 10}}},
      {"restaurant_id" : 1,
       "Name":1,"district" :1,"cuisine" :1});
21. Write a MongoDB query to find the restaurant Id, name, district and cuisine for those
    restaurants which prepared dish except 'American' and 'Chinees' or restaurant's name 
    begins with letter 'Wil'. 

     db.restaurant.find(
     {$or: [
     {Name: /^Wil/}, 
     {"$and": [ {"cuisine" : {$ne :"American "}},{"cuisine" : {$ne :"Chinees"}}]}
     ]}
     ,{"restaurant_id" : 1,"name":1,"district" :1,"cuisine" :1}
     );
22. Write a MongoDB query to find the restaurant Id, name, and grades for those restaurants 
    which achieved a grade of "A" and scored 11 on an ISODate "2014-08-11T00:00:00Z" among 
    many of survey dates.. 

              db.restaurant.find( 
                {
                 "Ratings.date": ISODate("2014-08-11T00:00:00Z"), 
                 "Ratings.rating":4, 
                 "Ratings.score" :11
                }, 
                {"restaurant_id" : 1,"Name":1,"Ratings.rating":1}
                );

23. Write a MongoDB query to find the restaurant Id, name and grades for those restaurants
    where the 2nd element of grades array contains a grade of "A" and score 9 on an ISODate
    "2014-08-11T00:00:00Z". 

     db.restaurant.find( 
                      { "Ratings.1.date": ISODate("2014-08-11T00:00:00Z"), 
                        "Ratings.1.rating":5 , 
                        "Ratings.1.score" :9
                      }, 
                       {"restaurant_id" : 1,"Name":1,"Ratings.1.rating":1});

25. Write a MongoDB query to arrange the name of the restaurants in ascending order along 
    with all the columns
    
    db.restaurant.find().sort({"Name":1});
 
26. Write a MongoDB query to arrange the name of the restaurants in descending along with 
    all the columns. 
   
    db.restaurant.find().sort({"Name":-1});  

27. Write a MongoDB query to arranged the name of the cuisine in ascending order and for 
    that same cuisine district should be in descending order. 
    db.restaurant.find().sort(
                           {"cuisine":1,"district" : -1,}
                          );

28. Write a MongoDB query to know whether all the addresses contains the street or not. 
                           
    db.restaurant.find(
                     {"address.street" : 
                         { $exists : true } 
                     } 
                   );

31. Write a MongoDB query to find the restaurant name, district, and cuisine for those 
    restaurants which contains 'mon' as three letters somewhere in its name. 
    db.restaurant.find(
                   { Name : 
                     { $regex : "mon.*", $options: "i" } 
                   },
                       {
                         "Name":1,"district":1, "cuisine" :1});
       
32. Write a MongoDB query to find the restaurant name, district, and cuisine for those 
    restaurants which contain 'Mad' as first three letters of its name 

     db.restaurant.find(
                   { Name : 
                     { $regex : /^Mad/i, } 
                   },
                       {
                         "Name":1, "district":1, "cuisine" :1});
            
